//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CustomerSurvey3
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace CustomerSurvey3.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'FindUHTenant_Result' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/CustomerSurvey3.Web")]
    public sealed partial class FindUHTenant_Result : Entity
    {
        
        private string _address;
        
        private string _name;
        
        private int _persNo;
        
        private string _region;
        
        private string _tenure;
        
        private string _uhTenancyRef;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPersNoChanging(int value);
        partial void OnPersNoChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnTenureChanging(string value);
        partial void OnTenureChanged();
        partial void OnUHTenancyRefChanging(string value);
        partial void OnUHTenancyRefChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FindUHTenant_Result"/> class.
        /// </summary>
        public FindUHTenant_Result()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [StringLength(44)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersNo' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PersNo
        {
            get
            {
                return this._persNo;
            }
            set
            {
                if ((this._persNo != value))
                {
                    this.OnPersNoChanging(value);
                    this.ValidateProperty("PersNo", value);
                    this._persNo = value;
                    this.RaisePropertyChanged("PersNo");
                    this.OnPersNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Region' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Region
        {
            get
            {
                return this._region;
            }
            set
            {
                if ((this._region != value))
                {
                    this.OnRegionChanging(value);
                    this.RaiseDataMemberChanging("Region");
                    this.ValidateProperty("Region", value);
                    this._region = value;
                    this.RaiseDataMemberChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Tenure' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Tenure
        {
            get
            {
                return this._tenure;
            }
            set
            {
                if ((this._tenure != value))
                {
                    this.OnTenureChanging(value);
                    this.RaiseDataMemberChanging("Tenure");
                    this.ValidateProperty("Tenure", value);
                    this._tenure = value;
                    this.RaiseDataMemberChanged("Tenure");
                    this.OnTenureChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UHTenancyRef' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        [StringLength(124)]
        public string UHTenancyRef
        {
            get
            {
                return this._uhTenancyRef;
            }
            set
            {
                if ((this._uhTenancyRef != value))
                {
                    this.OnUHTenancyRefChanging(value);
                    this.ValidateProperty("UHTenancyRef", value);
                    this._uhTenancyRef = value;
                    this.RaisePropertyChanged("UHTenancyRef");
                    this.OnUHTenancyRefChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._uhTenancyRef == null))
            {
                return null;
            }
            return EntityKey.Create(this._persNo, this._uhTenancyRef);
        }
    }
    
    /// <summary>
    /// The 'Lookup' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/CustomerSurvey3.Web")]
    public sealed partial class Lookup : Entity
    {
        
        private bool _active;
        
        private int _id;
        
        private decimal _order;
        
        private string _text;
        
        private string _type;
        
        private string _uhRef;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(bool value);
        partial void OnActiveChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnOrderChanging(decimal value);
        partial void OnOrderChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnUHRefChanging(string value);
        partial void OnUHRefChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Lookup"/> class.
        /// </summary>
        public Lookup()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Order' value.
        /// </summary>
        [DataMember()]
        public decimal Order
        {
            get
            {
                return this._order;
            }
            set
            {
                if ((this._order != value))
                {
                    this.OnOrderChanging(value);
                    this.RaiseDataMemberChanging("Order");
                    this.ValidateProperty("Order", value);
                    this._order = value;
                    this.RaiseDataMemberChanged("Order");
                    this.OnOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Text' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if ((this._text != value))
                {
                    this.OnTextChanging(value);
                    this.RaiseDataMemberChanging("Text");
                    this.ValidateProperty("Text", value);
                    this._text = value;
                    this.RaiseDataMemberChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(4)]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UHRef' value.
        /// </summary>
        [DataMember()]
        [StringLength(3)]
        public string UHRef
        {
            get
            {
                return this._uhRef;
            }
            set
            {
                if ((this._uhRef != value))
                {
                    this.OnUHRefChanging(value);
                    this.RaiseDataMemberChanging("UHRef");
                    this.ValidateProperty("UHRef", value);
                    this._uhRef = value;
                    this.RaiseDataMemberChanged("UHRef");
                    this.OnUHRefChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'SurveyAnswer' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/CustomerSurvey3.Web")]
    public sealed partial class SurveyAnswer : Entity
    {
        
        private int _id;
        
        private string _ref;
        
        private EntityRef<SurveyInstance> _surveyInstance;
        
        private int _surveyInstanceId;
        
        private EntityRef<SurveyQuestion> _surveyQuestion;
        
        private int _surveyQuestionId;
        
        private string _text;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnRefChanging(string value);
        partial void OnRefChanged();
        partial void OnSurveyInstanceIdChanging(int value);
        partial void OnSurveyInstanceIdChanged();
        partial void OnSurveyQuestionIdChanging(int value);
        partial void OnSurveyQuestionIdChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyAnswer"/> class.
        /// </summary>
        public SurveyAnswer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ref' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Ref
        {
            get
            {
                return this._ref;
            }
            set
            {
                if ((this._ref != value))
                {
                    this.OnRefChanging(value);
                    this.RaiseDataMemberChanging("Ref");
                    this.ValidateProperty("Ref", value);
                    this._ref = value;
                    this.RaiseDataMemberChanged("Ref");
                    this.OnRefChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SurveyInstance"/> entity.
        /// </summary>
        [Association("SurveyInstance_SurveyAnswer", "SurveyInstanceId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public SurveyInstance SurveyInstance
        {
            get
            {
                if ((this._surveyInstance == null))
                {
                    this._surveyInstance = new EntityRef<SurveyInstance>(this, "SurveyInstance", this.FilterSurveyInstance);
                }
                return this._surveyInstance.Entity;
            }
            set
            {
                SurveyInstance previous = this.SurveyInstance;
                if ((previous != value))
                {
                    this.ValidateProperty("SurveyInstance", value);
                    if ((previous != null))
                    {
                        this._surveyInstance.Entity = null;
                        previous.SurveyAnswers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SurveyInstanceId = value.Id;
                    }
                    else
                    {
                        this.SurveyInstanceId = default(int);
                    }
                    this._surveyInstance.Entity = value;
                    if ((value != null))
                    {
                        value.SurveyAnswers.Add(this);
                    }
                    this.RaisePropertyChanged("SurveyInstance");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SurveyInstanceId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SurveyInstanceId
        {
            get
            {
                return this._surveyInstanceId;
            }
            set
            {
                if ((this._surveyInstanceId != value))
                {
                    this.OnSurveyInstanceIdChanging(value);
                    this.RaiseDataMemberChanging("SurveyInstanceId");
                    this.ValidateProperty("SurveyInstanceId", value);
                    this._surveyInstanceId = value;
                    this.RaiseDataMemberChanged("SurveyInstanceId");
                    this.OnSurveyInstanceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SurveyQuestion"/> entity.
        /// </summary>
        [Association("SurveyQuestion_SurveyAnswer", "SurveyQuestionId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public SurveyQuestion SurveyQuestion
        {
            get
            {
                if ((this._surveyQuestion == null))
                {
                    this._surveyQuestion = new EntityRef<SurveyQuestion>(this, "SurveyQuestion", this.FilterSurveyQuestion);
                }
                return this._surveyQuestion.Entity;
            }
            set
            {
                SurveyQuestion previous = this.SurveyQuestion;
                if ((previous != value))
                {
                    this.ValidateProperty("SurveyQuestion", value);
                    if ((previous != null))
                    {
                        this._surveyQuestion.Entity = null;
                        previous.SurveyAnswers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SurveyQuestionId = value.Id;
                    }
                    else
                    {
                        this.SurveyQuestionId = default(int);
                    }
                    this._surveyQuestion.Entity = value;
                    if ((value != null))
                    {
                        value.SurveyAnswers.Add(this);
                    }
                    this.RaisePropertyChanged("SurveyQuestion");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SurveyQuestionId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SurveyQuestionId
        {
            get
            {
                return this._surveyQuestionId;
            }
            set
            {
                if ((this._surveyQuestionId != value))
                {
                    this.OnSurveyQuestionIdChanging(value);
                    this.RaiseDataMemberChanging("SurveyQuestionId");
                    this.ValidateProperty("SurveyQuestionId", value);
                    this._surveyQuestionId = value;
                    this.RaiseDataMemberChanged("SurveyQuestionId");
                    this.OnSurveyQuestionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Text' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if ((this._text != value))
                {
                    this.OnTextChanging(value);
                    this.RaiseDataMemberChanging("Text");
                    this.ValidateProperty("Text", value);
                    this._text = value;
                    this.RaiseDataMemberChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
        
        private bool FilterSurveyInstance(SurveyInstance entity)
        {
            return (entity.Id == this.SurveyInstanceId);
        }
        
        private bool FilterSurveyQuestion(SurveyQuestion entity)
        {
            return (entity.Id == this.SurveyQuestionId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'SurveyInstance' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/CustomerSurvey3.Web")]
    public sealed partial class SurveyInstance : Entity
    {
        
        private DateTime _date;
        
        private int _id;
        
        private string _name;
        
        private string _relationship;
        
        private EntityCollection<SurveyAnswer> _surveyAnswers;
        
        private EntityRef<SurveyType> _surveyType;
        
        private int _surveyTypeId;
        
        private Nullable<int> _uhPersonNo;
        
        private string _uhTenantRef;
        
        private string _user;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateChanging(DateTime value);
        partial void OnDateChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRelationshipChanging(string value);
        partial void OnRelationshipChanged();
        partial void OnSurveyTypeIdChanging(int value);
        partial void OnSurveyTypeIdChanged();
        partial void OnUHPersonNoChanging(Nullable<int> value);
        partial void OnUHPersonNoChanged();
        partial void OnUHTenantRefChanging(string value);
        partial void OnUHTenantRefChanged();
        partial void OnUserChanging(string value);
        partial void OnUserChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyInstance"/> class.
        /// </summary>
        public SurveyInstance()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Relationship' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Relationship
        {
            get
            {
                return this._relationship;
            }
            set
            {
                if ((this._relationship != value))
                {
                    this.OnRelationshipChanging(value);
                    this.RaiseDataMemberChanging("Relationship");
                    this.ValidateProperty("Relationship", value);
                    this._relationship = value;
                    this.RaiseDataMemberChanged("Relationship");
                    this.OnRelationshipChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SurveyAnswer"/> entity instances.
        /// </summary>
        [Association("SurveyInstance_SurveyAnswer", "Id", "SurveyInstanceId")]
        [XmlIgnore()]
        public EntityCollection<SurveyAnswer> SurveyAnswers
        {
            get
            {
                if ((this._surveyAnswers == null))
                {
                    this._surveyAnswers = new EntityCollection<SurveyAnswer>(this, "SurveyAnswers", this.FilterSurveyAnswers, this.AttachSurveyAnswers, this.DetachSurveyAnswers);
                }
                return this._surveyAnswers;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SurveyType"/> entity.
        /// </summary>
        [Association("SurveyType_SurveyInstance", "SurveyTypeId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public SurveyType SurveyType
        {
            get
            {
                if ((this._surveyType == null))
                {
                    this._surveyType = new EntityRef<SurveyType>(this, "SurveyType", this.FilterSurveyType);
                }
                return this._surveyType.Entity;
            }
            set
            {
                SurveyType previous = this.SurveyType;
                if ((previous != value))
                {
                    this.ValidateProperty("SurveyType", value);
                    if ((previous != null))
                    {
                        this._surveyType.Entity = null;
                        previous.SurveyInstances.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SurveyTypeId = value.Id;
                    }
                    else
                    {
                        this.SurveyTypeId = default(int);
                    }
                    this._surveyType.Entity = value;
                    if ((value != null))
                    {
                        value.SurveyInstances.Add(this);
                    }
                    this.RaisePropertyChanged("SurveyType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SurveyTypeId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SurveyTypeId
        {
            get
            {
                return this._surveyTypeId;
            }
            set
            {
                if ((this._surveyTypeId != value))
                {
                    this.OnSurveyTypeIdChanging(value);
                    this.RaiseDataMemberChanging("SurveyTypeId");
                    this.ValidateProperty("SurveyTypeId", value);
                    this._surveyTypeId = value;
                    this.RaiseDataMemberChanged("SurveyTypeId");
                    this.OnSurveyTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UHPersonNo' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> UHPersonNo
        {
            get
            {
                return this._uhPersonNo;
            }
            set
            {
                if ((this._uhPersonNo != value))
                {
                    this.OnUHPersonNoChanging(value);
                    this.RaiseDataMemberChanging("UHPersonNo");
                    this.ValidateProperty("UHPersonNo", value);
                    this._uhPersonNo = value;
                    this.RaiseDataMemberChanged("UHPersonNo");
                    this.OnUHPersonNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UHTenantRef' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string UHTenantRef
        {
            get
            {
                return this._uhTenantRef;
            }
            set
            {
                if ((this._uhTenantRef != value))
                {
                    this.OnUHTenantRefChanging(value);
                    this.RaiseDataMemberChanging("UHTenantRef");
                    this.ValidateProperty("UHTenantRef", value);
                    this._uhTenantRef = value;
                    this.RaiseDataMemberChanged("UHTenantRef");
                    this.OnUHTenantRefChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'User' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string User
        {
            get
            {
                return this._user;
            }
            set
            {
                if ((this._user != value))
                {
                    this.OnUserChanging(value);
                    this.RaiseDataMemberChanging("User");
                    this.ValidateProperty("User", value);
                    this._user = value;
                    this.RaiseDataMemberChanged("User");
                    this.OnUserChanged();
                }
            }
        }
        
        private void AttachSurveyAnswers(SurveyAnswer entity)
        {
            entity.SurveyInstance = this;
        }
        
        private void DetachSurveyAnswers(SurveyAnswer entity)
        {
            entity.SurveyInstance = null;
        }
        
        private bool FilterSurveyAnswers(SurveyAnswer entity)
        {
            return (entity.SurveyInstanceId == this.Id);
        }
        
        private bool FilterSurveyType(SurveyType entity)
        {
            return (entity.Id == this.SurveyTypeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'SurveyQuestion' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/CustomerSurvey3.Web")]
    public sealed partial class SurveyQuestion : Entity
    {
        
        private int _id;
        
        private decimal _order;
        
        private EntityCollection<SurveyAnswer> _surveyAnswers;
        
        private EntityRef<SurveyType> _surveyType;
        
        private int _surveyTypeId;
        
        private string _text;
        
        private string _type;
        
        private string _validationRule;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnOrderChanging(decimal value);
        partial void OnOrderChanged();
        partial void OnSurveyTypeIdChanging(int value);
        partial void OnSurveyTypeIdChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnValidationRuleChanging(string value);
        partial void OnValidationRuleChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyQuestion"/> class.
        /// </summary>
        public SurveyQuestion()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Order' value.
        /// </summary>
        [DataMember()]
        public decimal Order
        {
            get
            {
                return this._order;
            }
            set
            {
                if ((this._order != value))
                {
                    this.OnOrderChanging(value);
                    this.RaiseDataMemberChanging("Order");
                    this.ValidateProperty("Order", value);
                    this._order = value;
                    this.RaiseDataMemberChanged("Order");
                    this.OnOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SurveyAnswer"/> entity instances.
        /// </summary>
        [Association("SurveyQuestion_SurveyAnswer", "Id", "SurveyQuestionId")]
        [XmlIgnore()]
        public EntityCollection<SurveyAnswer> SurveyAnswers
        {
            get
            {
                if ((this._surveyAnswers == null))
                {
                    this._surveyAnswers = new EntityCollection<SurveyAnswer>(this, "SurveyAnswers", this.FilterSurveyAnswers, this.AttachSurveyAnswers, this.DetachSurveyAnswers);
                }
                return this._surveyAnswers;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SurveyType"/> entity.
        /// </summary>
        [Association("SurveyType_SurveyQuestion", "SurveyTypeId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public SurveyType SurveyType
        {
            get
            {
                if ((this._surveyType == null))
                {
                    this._surveyType = new EntityRef<SurveyType>(this, "SurveyType", this.FilterSurveyType);
                }
                return this._surveyType.Entity;
            }
            set
            {
                SurveyType previous = this.SurveyType;
                if ((previous != value))
                {
                    this.ValidateProperty("SurveyType", value);
                    if ((previous != null))
                    {
                        this._surveyType.Entity = null;
                        previous.SurveyQuestions.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SurveyTypeId = value.Id;
                    }
                    else
                    {
                        this.SurveyTypeId = default(int);
                    }
                    this._surveyType.Entity = value;
                    if ((value != null))
                    {
                        value.SurveyQuestions.Add(this);
                    }
                    this.RaisePropertyChanged("SurveyType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SurveyTypeId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SurveyTypeId
        {
            get
            {
                return this._surveyTypeId;
            }
            set
            {
                if ((this._surveyTypeId != value))
                {
                    this.OnSurveyTypeIdChanging(value);
                    this.RaiseDataMemberChanging("SurveyTypeId");
                    this.ValidateProperty("SurveyTypeId", value);
                    this._surveyTypeId = value;
                    this.RaiseDataMemberChanged("SurveyTypeId");
                    this.OnSurveyTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Text' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if ((this._text != value))
                {
                    this.OnTextChanging(value);
                    this.RaiseDataMemberChanging("Text");
                    this.ValidateProperty("Text", value);
                    this._text = value;
                    this.RaiseDataMemberChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(10)]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValidationRule' value.
        /// </summary>
        [DataMember()]
        public string ValidationRule
        {
            get
            {
                return this._validationRule;
            }
            set
            {
                if ((this._validationRule != value))
                {
                    this.OnValidationRuleChanging(value);
                    this.RaiseDataMemberChanging("ValidationRule");
                    this.ValidateProperty("ValidationRule", value);
                    this._validationRule = value;
                    this.RaiseDataMemberChanged("ValidationRule");
                    this.OnValidationRuleChanged();
                }
            }
        }
        
        private void AttachSurveyAnswers(SurveyAnswer entity)
        {
            entity.SurveyQuestion = this;
        }
        
        private void DetachSurveyAnswers(SurveyAnswer entity)
        {
            entity.SurveyQuestion = null;
        }
        
        private bool FilterSurveyAnswers(SurveyAnswer entity)
        {
            return (entity.SurveyQuestionId == this.Id);
        }
        
        private bool FilterSurveyType(SurveyType entity)
        {
            return (entity.Id == this.SurveyTypeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'SurveyType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/CustomerSurvey3.Web")]
    public sealed partial class SurveyType : Entity
    {
        
        private bool _active;
        
        private string _details;
        
        private int _id;
        
        private string _name;
        
        private EntityCollection<SurveyInstance> _surveyInstances;
        
        private EntityCollection<SurveyQuestion> _surveyQuestions;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(bool value);
        partial void OnActiveChanged();
        partial void OnDetailsChanging(string value);
        partial void OnDetailsChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyType"/> class.
        /// </summary>
        public SurveyType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Details' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Details
        {
            get
            {
                return this._details;
            }
            set
            {
                if ((this._details != value))
                {
                    this.OnDetailsChanging(value);
                    this.RaiseDataMemberChanging("Details");
                    this.ValidateProperty("Details", value);
                    this._details = value;
                    this.RaiseDataMemberChanged("Details");
                    this.OnDetailsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SurveyInstance"/> entity instances.
        /// </summary>
        [Association("SurveyType_SurveyInstance", "Id", "SurveyTypeId")]
        [XmlIgnore()]
        public EntityCollection<SurveyInstance> SurveyInstances
        {
            get
            {
                if ((this._surveyInstances == null))
                {
                    this._surveyInstances = new EntityCollection<SurveyInstance>(this, "SurveyInstances", this.FilterSurveyInstances, this.AttachSurveyInstances, this.DetachSurveyInstances);
                }
                return this._surveyInstances;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SurveyQuestion"/> entity instances.
        /// </summary>
        [Association("SurveyType_SurveyQuestion", "Id", "SurveyTypeId")]
        [XmlIgnore()]
        public EntityCollection<SurveyQuestion> SurveyQuestions
        {
            get
            {
                if ((this._surveyQuestions == null))
                {
                    this._surveyQuestions = new EntityCollection<SurveyQuestion>(this, "SurveyQuestions", this.FilterSurveyQuestions, this.AttachSurveyQuestions, this.DetachSurveyQuestions);
                }
                return this._surveyQuestions;
            }
        }
        
        private void AttachSurveyInstances(SurveyInstance entity)
        {
            entity.SurveyType = this;
        }
        
        private void DetachSurveyInstances(SurveyInstance entity)
        {
            entity.SurveyType = null;
        }
        
        private bool FilterSurveyInstances(SurveyInstance entity)
        {
            return (entity.SurveyTypeId == this.Id);
        }
        
        private void AttachSurveyQuestions(SurveyQuestion entity)
        {
            entity.SurveyType = this;
        }
        
        private void DetachSurveyQuestions(SurveyQuestion entity)
        {
            entity.SurveyType = null;
        }
        
        private bool FilterSurveyQuestions(SurveyQuestion entity)
        {
            return (entity.SurveyTypeId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'SurveyUser' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/CustomerSurvey3.Web")]
    public sealed partial class SurveyUser : Entity
    {
        
        private bool _active;
        
        private string _user_name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnactiveChanging(bool value);
        partial void OnactiveChanged();
        partial void Onuser_nameChanging(string value);
        partial void Onuser_nameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyUser"/> class.
        /// </summary>
        public SurveyUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'active' value.
        /// </summary>
        [DataMember()]
        public bool active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnactiveChanging(value);
                    this.RaiseDataMemberChanging("active");
                    this.ValidateProperty("active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("active");
                    this.OnactiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'user_name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(3)]
        public string user_name
        {
            get
            {
                return this._user_name;
            }
            set
            {
                if ((this._user_name != value))
                {
                    this.Onuser_nameChanging(value);
                    this.ValidateProperty("user_name", value);
                    this._user_name = value;
                    this.RaisePropertyChanged("user_name");
                    this.Onuser_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._user_name;
        }
    }
}
namespace CustomerSurvey3.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using CustomerSurvey3.Web;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'SurveyService' DomainService.
    /// </summary>
    public sealed partial class SurveyContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyContext"/> class.
        /// </summary>
        public SurveyContext() : 
                this(new WebDomainClient<ISurveyServiceContract>(new Uri("CustomerSurvey3-Web-Services-SurveyService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SurveyService service URI.</param>
        public SurveyContext(Uri serviceUri) : 
                this(new WebDomainClient<ISurveyServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public SurveyContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Lookup"/> entity instances that have been loaded into this <see cref="SurveyContext"/> instance.
        /// </summary>
        public EntitySet<Lookup> Lookups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Lookup>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SurveyAnswer"/> entity instances that have been loaded into this <see cref="SurveyContext"/> instance.
        /// </summary>
        public EntitySet<SurveyAnswer> SurveyAnswers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SurveyAnswer>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SurveyInstance"/> entity instances that have been loaded into this <see cref="SurveyContext"/> instance.
        /// </summary>
        public EntitySet<SurveyInstance> SurveyInstances
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SurveyInstance>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SurveyQuestion"/> entity instances that have been loaded into this <see cref="SurveyContext"/> instance.
        /// </summary>
        public EntitySet<SurveyQuestion> SurveyQuestions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SurveyQuestion>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SurveyType"/> entity instances that have been loaded into this <see cref="SurveyContext"/> instance.
        /// </summary>
        public EntitySet<SurveyType> SurveyTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SurveyType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SurveyUser"/> entity instances that have been loaded into this <see cref="SurveyContext"/> instance.
        /// </summary>
        public EntitySet<SurveyUser> SurveyUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SurveyUser>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FindUHTenant_Result"/> entity instances that have been loaded into this <see cref="SurveyContext"/> instance.
        /// </summary>
        public EntitySet<FindUHTenant_Result> FindUHTenant_Results
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FindUHTenant_Result>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Lookup"/> entity instances using the 'GetLookups' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Lookup"/> entity instances.</returns>
        public EntityQuery<Lookup> GetLookupsQuery()
        {
            this.ValidateMethod("GetLookupsQuery", null);
            return base.CreateQuery<Lookup>("GetLookups", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SurveyAnswer"/> entity instances using the 'GetSurveyAnswers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SurveyAnswer"/> entity instances.</returns>
        public EntityQuery<SurveyAnswer> GetSurveyAnswersQuery()
        {
            this.ValidateMethod("GetSurveyAnswersQuery", null);
            return base.CreateQuery<SurveyAnswer>("GetSurveyAnswers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SurveyInstance"/> entity instances using the 'GetSurveyInstances' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SurveyInstance"/> entity instances.</returns>
        public EntityQuery<SurveyInstance> GetSurveyInstancesQuery()
        {
            this.ValidateMethod("GetSurveyInstancesQuery", null);
            return base.CreateQuery<SurveyInstance>("GetSurveyInstances", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SurveyQuestion"/> entity instances using the 'GetSurveyQuestions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SurveyQuestion"/> entity instances.</returns>
        public EntityQuery<SurveyQuestion> GetSurveyQuestionsQuery()
        {
            this.ValidateMethod("GetSurveyQuestionsQuery", null);
            return base.CreateQuery<SurveyQuestion>("GetSurveyQuestions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SurveyType"/> entity instances using the 'GetSurveyTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SurveyType"/> entity instances.</returns>
        public EntityQuery<SurveyType> GetSurveyTypesQuery()
        {
            this.ValidateMethod("GetSurveyTypesQuery", null);
            return base.CreateQuery<SurveyType>("GetSurveyTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SurveyUser"/> entity instances using the 'GetSurveyUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SurveyUser"/> entity instances.</returns>
        public EntityQuery<SurveyUser> GetSurveyUsersQuery()
        {
            this.ValidateMethod("GetSurveyUsersQuery", null);
            return base.CreateQuery<SurveyUser>("GetSurveyUsers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FindUHTenant_Result"/> entity instances using the 'GetTenants' query.
        /// </summary>
        /// <param name="name">The value for the 'name' parameter of the query.</param>
        /// <param name="address">The value for the 'address' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FindUHTenant_Result"/> entity instances.</returns>
        public EntityQuery<FindUHTenant_Result> GetTenantsQuery(string name, string address)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("name", name);
            parameters.Add("address", address);
            this.ValidateMethod("GetTenantsQuery", parameters);
            return base.CreateQuery<FindUHTenant_Result>("GetTenants", parameters, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUserName' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetUserName(Action<InvokeOperation<string>> callback, object userState)
        {
            this.ValidateMethod("GetUserName", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetUserName", typeof(string), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUserName' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetUserName()
        {
            this.ValidateMethod("GetUserName", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetUserName", typeof(string), null, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SurveyContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SurveyService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ISurveyServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetLookups' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SurveyService/GetLookupsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SurveyService/GetLookups", ReplyAction="http://tempuri.org/SurveyService/GetLookupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetLookups(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLookups'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLookups'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLookups' operation.</returns>
            QueryResult<Lookup> EndGetLookups(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSurveyAnswers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SurveyService/GetSurveyAnswersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SurveyService/GetSurveyAnswers", ReplyAction="http://tempuri.org/SurveyService/GetSurveyAnswersResponse")]
            [WebGet()]
            IAsyncResult BeginGetSurveyAnswers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSurveyAnswers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSurveyAnswers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSurveyAnswers' operation.</returns>
            QueryResult<SurveyAnswer> EndGetSurveyAnswers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSurveyInstances' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SurveyService/GetSurveyInstancesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SurveyService/GetSurveyInstances", ReplyAction="http://tempuri.org/SurveyService/GetSurveyInstancesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSurveyInstances(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSurveyInstances'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSurveyInstances'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSurveyInstances' operation.</returns>
            QueryResult<SurveyInstance> EndGetSurveyInstances(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSurveyQuestions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SurveyService/GetSurveyQuestionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SurveyService/GetSurveyQuestions", ReplyAction="http://tempuri.org/SurveyService/GetSurveyQuestionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSurveyQuestions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSurveyQuestions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSurveyQuestions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSurveyQuestions' operation.</returns>
            QueryResult<SurveyQuestion> EndGetSurveyQuestions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSurveyTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SurveyService/GetSurveyTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SurveyService/GetSurveyTypes", ReplyAction="http://tempuri.org/SurveyService/GetSurveyTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSurveyTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSurveyTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSurveyTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSurveyTypes' operation.</returns>
            QueryResult<SurveyType> EndGetSurveyTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSurveyUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SurveyService/GetSurveyUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SurveyService/GetSurveyUsers", ReplyAction="http://tempuri.org/SurveyService/GetSurveyUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetSurveyUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSurveyUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSurveyUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSurveyUsers' operation.</returns>
            QueryResult<SurveyUser> EndGetSurveyUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTenants' operation.
            /// </summary>
            /// <param name="name">The value for the 'name' parameter of this action.</param>
            /// <param name="address">The value for the 'address' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SurveyService/GetTenantsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SurveyService/GetTenants", ReplyAction="http://tempuri.org/SurveyService/GetTenantsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTenants(string name, string address, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTenants'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTenants'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTenants' operation.</returns>
            QueryResult<FindUHTenant_Result> EndGetTenants(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserName' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SurveyService/GetUserNameDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SurveyService/GetUserName", ReplyAction="http://tempuri.org/SurveyService/GetUserNameResponse")]
            IAsyncResult BeginGetUserName(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserName'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserName'.</param>
            /// <returns>The 'String' returned from the 'GetUserName' operation.</returns>
            string EndGetUserName(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SurveyService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SurveyService/SubmitChanges", ReplyAction="http://tempuri.org/SurveyService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SurveyContextEntityContainer : EntityContainer
        {
            
            public SurveyContextEntityContainer()
            {
                this.CreateEntitySet<FindUHTenant_Result>(EntitySetOperations.None);
                this.CreateEntitySet<Lookup>(EntitySetOperations.None);
                this.CreateEntitySet<SurveyAnswer>(EntitySetOperations.All);
                this.CreateEntitySet<SurveyInstance>(EntitySetOperations.All);
                this.CreateEntitySet<SurveyQuestion>(EntitySetOperations.None);
                this.CreateEntitySet<SurveyType>(EntitySetOperations.None);
                this.CreateEntitySet<SurveyUser>(EntitySetOperations.None);
            }
        }
    }
}
